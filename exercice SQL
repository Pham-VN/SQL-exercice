// Afficher le nom des clients.
SELECT nomcli FROM Clients;
// Afficher toutes les informations sur tous les films
SELECT * FROM Films;
// La liste des codes des films loués sans doublon
SELECT DISTINCT codefilm FROM Locations;
// Afficher sans doublon, les codes des films loués dans une colonne portant le titre "Le code des films loués".
SELECT DISTINCT codefilm AS "Le code des films loués"FROM Locations;
//Afficher les informations sur les produits dans l'ordre croissant des prix
SELECT * FROM Produit 
ORDER BY prixpro ASC;
// Afficher toutes les informations sur les produits dans l'ordre décroissant des prix.
SELECT * FROM Produit 
ORDER BY prixpro DESC;
//Afficher toutes les informations sur les clients dans l'ordre alphabétique des villes.
SELECT * FROM Clients 
ORDER BY villecli;
//Afficher le nom des films dans l'ordre alphabétique inverse.
SELECT nomfilm FROM Films 
ORDER BY nomfilm DESC;
////Afficher les locations de la plus ancienne à la plus récente
SELECT * FROM Locations 
ORDER BY datedebut ASC;
//Afficher pour chaque film loué, le nom du film et la date de location. Le resultat devra être trié dans l'ordre alphabétique des films
SELECT Films.nomfilm, Locations.datedebut 
FROM Films
INNER JOIN Locations ON Films.codefilm = Locations.codefilm
ORDER BY Films.nomfilm;
//Afficher sans doublon le nom des villes dans lesquelles des clients ont loué des films. Le résultat sera trié dans l'ordre alphabétique des villes
SELECT DISTINCT Clients.villecli 
FROM Clients
INNER JOIN Locations ON Clients.codecli = Locations.codecli
ORDER BY villecli ASC;
// la commande LEFT JOIN (aussi appelée LEFT OUTER JOIN) est un type de jointure entre 2 tables. Cela permet de lister tous les résultats de la table de gauche (left = gauche) même s’il n’y a pas de correspondance dans la deuxième tables.
//Afficher les numéros et les villes des clients en indiquant pour ceux qui ont loué des films, le numéro du film emprunté. Le résultat sera affiché dans l'ordre alphabétique des villes.
SELECT Clients.codecli, Clients.villecli, Locations.codefilm
FROM Clients 
LEFT JOIN  Locations ON Clients.codecli = Locations.codecli
ORDER BY  villecli ASC;
// Pour chaque client qui a loué un film, le nom du client, le nom du film loué, et la date de début de la location. Le résultat sera affiché dans l'ordre alphabétique des noms des clients
SELECT nomcli, nomfilm, datedebut
FROM Clients
INNER JOIN Locations ON Clients.codecli = Locations.codecli
INNER JOIN Films ON Locations.codefilm = Films.codefilm
ORDER BY nomcli ASC;
// Afficher le nom du client n°1 dans une colonne qui portera comme titre "Nom du client n°1"
SELECT nomcli AS "Nom du client n°1" FROM Clients
WHERE codecli = 1; 
// Afficher le nom des clients qui commencent par un 'c' classé dans l'ordre alphabétique.
Select nomcli From Clients
Where nomcli LIKE "c%"
ORDER BY nomcli;
// Afficher les codes des films, leur noms et la date de début de location des films loués entre le 09/04/2013 et le 11/04/2013. Le résultat sera trié dans l'ordre inverse des dates de début de location.
SELECT Locations.codefilm, Films.nomfilm, Locations.datedebut
From Locations
INNER JOIN Films ON Locations.codefilm = Films.codefilm
WHERE datedebut BETWEEN '2013-04-09' AND '2013-04-11';
// Le nombre total de jours de location du client 1 dans une colonne qui portera comme titre "Nombre de jour de location client 1"
SELECT  SUM(duree) AS "Nombre de jour de location client 1"
FROM Locations
WHERE codecli = 1;
//La date de location la plus ancienne dans une colonne qui portera le titre "Date la plus ancienne".
SELECT MIN(datedebut) AS "Date la plus ancienne"
FROM Locations;
// Le nombre de clients dans chaque ville dans une colonne qui s'appelle "Nombre de clients par ville"
SELECT COUNT(Clients.villecli) AS "Nombre de clients par ville"
FROM Clients
WHERE villecli IN ("Saint-Avold","Forbach","Freyming") 
Group BY Clients.villecli;
//Le nom de chaque film avec la durée de location la plus longue. Le résultat sera affiché dans l'ordre alphabétique des noms des films.
SELECT Films.nomfilm, MAX(Locations.duree) as "MAX(duree)"
FROM Films
INNER JOIN Locations ON Films.codefilm = Locations.codefilm
GROUP BY Locations.codefilm
ORDER BY nomfilm;
